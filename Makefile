#-------------------------------------------------------------------------------
# SVN version info:
# $Id$
#-------------------------------------------------------------------------------
# Build Modelling tools as a static and shared libraries, produce doc file (pdf)
#-------------------------------------------------------------------------------

# Supported Fortran compiler types
GF_FC = gfortran
IF_FC = ifort
SF_FC = f95

# Choose the compiler type
FC = $(GF_FC)

#*******************************************************************************

# Main building blocks, define
SRC = BASE_UTILS.f90 BASE_CSV_IO.f90 BASE_LOGGER.f90 BASE_RANDOM.f90 \
      BASE_ERRORS.f90
OBJ = BASE_UTILS.o BASE_CSV_IO.o BASE_LOGGER.o BASE_RANDOM.o BASE_ERRORS.o
MOD = base_utils.mod  csv_io.mod  logger.mod base_random.mod \
      assert.mod errors.mod exception.mod throwable.mod
DOC = BASE_UTILS.adoc
LIB = lib_hedutils.a
DIB = lib_hedutils.so

#  Header file setting compiler/platform specific code for PRNG module
AUTOGEN_HEADER_RAND = BASE_RANDOM.inc

#-------------------------------------------------------------------------------

# Options for GNU Fortran
GF_STATIC = -static-libgfortran -static -static-libgcc
GF_TRAPS = -ffpe-trap=
GF_RCHECKS = -Wall -fbounds-check
GF_FFLAGS = $(GF_STATIC) $(GF_TRAPS) $(GF_RCHECKS) -O3 -fPIC
GF_STLIBBLD = ar rc $(LIB) $(OBJ)
GF_DYLIBBLD = $(FC) $(GF_TRAPS) -O3 -fPIC -shared -o $(DIB)
#-ffpe-trap=zero,invalid,overflow,underflow
GF_INFO = "Include the library file or -Ldir"

# Options for Intel Fortran
IF_STATIC = -static
IF_TRAPS =-fpe3
IF_RCHECKS = -warn -check bounds,pointers,format,uninit
IF_FFLAGS = -sox -O3 -parallel -fpic $(IF_STATIC) $(IF_TRAPS) $(IF_RCHECKS)
IF_STLIBBLD = ar cr $(LIB) $(OBJ)
IF_DYLIBBLD = $(FC) -sox -O3 -parallel -fpic $(IF_TRAPS) -shared -o $(DIB)
# -fpe3 no traps; -fpe0 all traps
IF_INFO = "Include the library file or -Ldir"

# Options for Sun/Oracle Solaris Studio
SF_STATIC = –Bstatic –dn
SF_TRAPS = -ftrap=%none
SF_RCHECKS = –C
SF_FFLAGS = -fast -autopar -depend=yes -pic $(SF_STATIC) $(SF_TRAPS) $(SF_RCHECKS)
SF_STLIBBLD = ar cr $(LIB) $(OBJ)
SF_DYLIBBLD = $(FC) -fast -autopar -depend=yes -pic $(SF_TRAPS) -G -o $(DIB)
# -fast = O5
# -ftrap=common is a macro for -ftrap=invalid,overflow,division.
# -ftrap=%all, %none, common
SF_INFO = "Include the library file or use -l and -L compile options"

#-------------------------------------------------------------------------------
# Set other build options depending on the specific compiler

ifeq ($(FC),gfortran)
	FFLAGS = $(GF_FFLAGS)
	STLIBBLD =  $(GF_STLIBBLD)
	DYLIBBLD =  $(GF_DYLIBBLD)
	INFO = $(GF_INFO)
endif

ifeq ($(FC),ifort)
	FFLAGS = $(IF_FFLAGS)
	STLIBBLD = $(IF_STLIBBLD)
	DYLIBBLD = $(IF_DYLIBBLD)
	INFO = $(IF_INFO)
endif

ifeq ($(FC),f95)
	FFLAGS = $(SF_FFLAGS)
	STLIBBLD = $(SF_STLIBBLD)
	DYLIBBLD = $(SF_DYLIBBLD)
	INFO = $(SF_INFO)
endif

# DEBUG turns off all optimisations and keeps debug symbols.
ifdef DEBUG
	GF_FFLAGS = -O0 -g -ffpe-trap=zero,invalid,overflow,underflow $(GF_RCHECKS)
	IF_FFLAGS = -O0 -g -fpe0 $(IF_RCHECKS)
	SF_FFLAGS = -O0 -g -ftrap=%all $(SF_RCHECKS)
endif

#-------------------------------------------------------------------------------
# Documentation builder parameters (asciidoc)

DOCFIL = BASE_UTILS
DOCFMT = pdf
DOCDIR = doc/

#-------------------------------------------------------------------------------

# Determine this makefile's path. Be sure to place this BEFORE `include`s
THIS_FILE := $(lastword $(MAKEFILE_LIST))

# This is the search paths for looking for components, separated by blanks
VPATH = $(DOCDIR)
# Determine build platform
PLATFORM = $(shell uname)

#-------------------------------------------------------------------------------

# Autogenerated README.txt
ZIPFILE = LIBHEDUTILS_$(PLATFORM).zip
AUTOGEN_README_FILE = Readme.txt
define AUTOGEN_README
	$(shell echo "HEDTOOLS:" > $(AUTOGEN_README_FILE))
	$(shell echo "This is the shared library binary build of the modelling tools" >> $(AUTOGEN_README_FILE))
	$(shell echo "Note that .mod files are needed for compiling and linking." >> $(AUTOGEN_README_FILE))
	$(shell echo "Compile command:" >> $(AUTOGEN_README_FILE))
	$(shell echo "    $(FC) $(DIB) file.f90" >> $(AUTOGEN_README_FILE))
endef

#-------------------------------------------------------------------------------
# Autogenerated include file setting compiler/platform specific code for PRNG
# The module BASE_RANDOM includes some non-portable header code that
# depends on the conmpiler type. It is autogenerated here. The Fortran Module
# code contains INCLUDE statement. The appropriate include file is then
# autogenerated during the build process.
# The strategy of the build is two-step:
#    (1) Provide comment macro for the include file as well as the code adapted
#        for the specific compiler type and platform
#    (2) Select macro from the above list specific for the
#        compiler type
#    (3) build the BASE_RANDOM.o, the first statement is the include
#        autogeneration macro, then follow the compile instructions.

# Autogenerated include files
define AUTOGEN_COMMENT_RANDOM
	$(shell echo "! ---------------------------------------------------------" > $(AUTOGEN_HEADER_RAND))
	$(shell echo "! WARNING: auto-generated file, do NOT edit" >> $(AUTOGEN_HEADER_RAND))
	$(shell echo "! Sets compiler-specific code for random number generator" >> $(AUTOGEN_HEADER_RAND))
	$(shell echo "! ---------------------------------------------------------" >> $(AUTOGEN_HEADER_RAND))
endef

# Include file code for GNU
define AUTOGEN_CODE_GF
	$(shell echo "! GNU Fortran compiler:" >> $(AUTOGEN_HEADER_RAND))
	$(shell echo "use ISO_FORTRAN_ENV, only: int64">> $(AUTOGEN_HEADER_RAND))
	$(shell echo "implicit none">> $(AUTOGEN_HEADER_RAND))
	$(shell echo "integer, allocatable :: seed(:)">> $(AUTOGEN_HEADER_RAND))
	$(shell echo "integer :: i, n, un, istat, dt(8), pid">> $(AUTOGEN_HEADER_RAND))
	$(shell echo "integer(int64) :: t">> $(AUTOGEN_HEADER_RAND))
endef

# Include file code for Intel
define AUTOGEN_CODE_IF
	$(shell echo "! Intel Fortran compiler:" >> $(AUTOGEN_HEADER_RAND))
	$(shell echo "use ISO_FORTRAN_ENV, only: int64 " >> $(AUTOGEN_HEADER_RAND))
	$(shell echo "use IFPORT, only : getpid" >> $(AUTOGEN_HEADER_RAND))
	$(shell echo "implicit none" >> $(AUTOGEN_HEADER_RAND))
	$(shell echo "integer, allocatable :: seed(:)" >> $(AUTOGEN_HEADER_RAND))
	$(shell echo "integer :: i, n, un, istat, dt(8), pid" >> $(AUTOGEN_HEADER_RAND))
	$(shell echo "integer(int64) :: t" >> $(AUTOGEN_HEADER_RAND))
endef

# Include file code for Oracle
define AUTOGEN_CODE_SF
	$(shell echo "! Intel Oracle compiler:" >> $(AUTOGEN_HEADER_RAND))
	$(shell echo "implicit none" >> $(AUTOGEN_HEADER_RAND))
	$(shell echo "integer, allocatable :: seed(:)" >> $(AUTOGEN_HEADER_RAND))
	$(shell echo "integer :: i, n, un, istat, dt(8), pid" >> $(AUTOGEN_HEADER_RAND))
	$(shell echo "integer, parameter :: int64 = selected_int_kind(18)" >> $(AUTOGEN_HEADER_RAND))
	$(shell echo "integer(int64) :: t" >> $(AUTOGEN_HEADER_RAND))
	$(shell echo "include \"system.inc\"" >> $(AUTOGEN_HEADER_RAND))
endef

# Select autogeneration of include file for the specific compiler type
ifeq ($(FC),$(GF_FC))
	AUTOGEN_CODE_RANDOM=$(AUTOGEN_CODE_GF)
endif

ifeq ($(FC),$(IF_FC))
	AUTOGEN_CODE_RANDOM=$(AUTOGEN_CODE_IF)
endif

ifeq ($(FC),$(SF_FC))
	AUTOGEN_CODE_RANDOM=$(AUTOGEN_CODE_SF)
endif

#*******************************************************************************

all: shared

lib: $(LIB)

# Static linking doesn't work well with gnu fortran
static: $(LIB)

shared: $(DIB)

inc: $(AUTOGEN_HEADER_RAND)

doc: $(DOCFIL).$(DOCFMT)

distclean: neat
	-rm -f $(OBJ) $(MOD) $(LIB) $(DIB) $(DOCDIR)/BASE_UTILS.$(DOCFMT) \
	       $(ZIPFILE) $(AUTOGEN_README_FILE) $(AUTOGEN_HEADER_RAND)

# We don't clean .mod files as they are necessary for building with .so
clean: neat
	-rm -f $(OBJ)

neat:
	-rm -f $(TMPFILES) *conflict*

$(LIB): $(OBJ)
	@$(MAKE) -f $(THIS_FILE) inc
	$(STLIBBLD)

$(DIB): $(SRC)
	@$(MAKE) -f $(THIS_FILE) inc
	$(DYLIBBLD) $(SRC)
	$(AUTOGEN_README)
	zip $(ZIPFILE) $(MOD) $(DIB) $(AUTOGEN_README_FILE)

$(DOCFIL).$(DOCFMT): $(DOCFIL).adoc
	a2x -f$(DOCFMT) BASE_UTILS.adoc
	mv $(DOCFIL).$(DOCFMT) $(DOCDIR)

#-------------------------------------------------------------------------------

# make include
$(AUTOGEN_HEADER_RAND): $(BASE_RANDOM.f90) $(THIS_FILE)
	$(AUTOGEN_COMMENT_RANDOM)
	$(AUTOGEN_CODE_RANDOM)
	@echo Generated include: $(AUTOGEN_HEADER_RAND) for $(FC)

# compile modules
BASE_UTILS.o: BASE_UTILS.f90
	$(FC) $(FFLAGS) -c BASE_UTILS.f90
BASE_CSV_IO.o: BASE_CSV_IO.f90
	$(FC) $(FFLAGS) -c BASE_CSV_IO.f90
BASE_LOGGER.o: BASE_LOGGER.f90
	$(FC) $(FFLAGS) -c BASE_LOGGER.f90
BASE_RANDOM.o: BASE_RANDOM.f90 $(THIS_FILE)
	@$(MAKE) -f $(THIS_FILE) inc
	$(FC) $(FFLAGS) -c BASE_RANDOM.f90
BASE_ERRORS.o: BASE_LOGGER.f90
	$(FC) $(FFLAGS) -c BASE_ERRORS.f90
